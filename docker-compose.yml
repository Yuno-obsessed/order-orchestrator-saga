version: "3.8"
services:

  order-db:
    container_name: order-db
    image: postgres:16-alpine
    restart: on-failure
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: sanity
      POSTGRES_PASSWORD: wordpass
    ports:
      - "127.0.0.1:5430:5432"
    volumes:
      - order-db.data:/var/lib/postgresql/data
      - ./config/postgres/order_init.sql:/docker-entrypoint-initdb.d/order_init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    profiles: ['prod', 'dev']
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  account-db:
    container_name: account-db
    image: postgres:16-alpine
    restart: on-failure
    environment:
      POSTGRES_DB: account_db
      POSTGRES_USER: sanity
      POSTGRES_PASSWORD: wordpass
    ports:
      - "127.0.0.1:5431:5432"
    volumes:
      - account-db.data:/var/lib/postgresql/data
      - ./config/postgres/account_init.sql:/docker-entrypoint-initdb.d/account_init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    profiles: ['prod', 'dev']
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.6
    container_name: zookeeper
    restart: always
    ports:
      - "127.0.0.1:2181:2181"
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    profiles: ['prod', 'dev']

  broker:
    image: confluentinc/cp-kafka:7.3.6
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "127.0.0.1:29092:29092"
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    profiles: ['prod', 'dev']

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.6
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "127.0.0.1:8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    profiles: ['prod', 'dev']

  connect:
    image: kafka-connect
    build:
      context: config/kafka-connect
      dockerfile: Dockerfile-debezium
    hostname: connect
    container_name: connect
    depends_on:
      - schema-registry
    ports:
      - "127.0.0.1:8083:8083"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -X GET \"http://localhost:8083/connectors?expand=info&expand=status\""]
      interval: 10s
      retries: 5
      start_period: 10s
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-1
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_ERRORS_TOLERANCE: "ALL"
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
    profiles: ['prod', 'dev']

  order:
    container_name: order
    build:
      context: .
      dockerfile: order/Dockerfile
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      - order-db
      - broker
      - connect
    profiles: ['prod']

  account:
    container_name: account
    build:
      context: .
      dockerfile: account/Dockerfile
    ports:
      - "127.0.0.1:8001:8001"
    depends_on:
      - account-db
      - broker
      - connect
    profiles: ['prod']

volumes:
  order-db.data: {}
  account-db.data: {}